# convert to 1 row x 10 column data.frame.
split(aa, category_names) %>% cbind.data.frame()
cbind.data.frame(split_vec)
library(tidyverse)
library(jsonlite)
library(listviewer)
# https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite/
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
raw_json <- jsonlite::fromJSON(url_json)
rm(list = ls())
library(tidyverse)
library(jsonlite)
library(listviewer)
# https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite/
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
raw_json <- jsonlite::fromJSON(url_json)
str(raw_json, max.level = 1)
str(raw_json, max.level = 1)
raw_json$athletes %>% str(max.level = 1)
raw_json$athletes$athlete %>% dim()
raw_json$athletes$athlete %>% str(max.level = 1)
raw_json$athletes$categories %>% str(max.level = 1)
raw_json$athletes$categories %>% length()
raw_json$athletes$categories[[1]] %>% names()
# "name", "displayName", "totals", "ranks"
# extract the totals (3rd element) for the 1st category.
raw_json$athletes$categories[[1]][3]
raw_json$athletes$categories[[1]][3][[1]]
# 30 x  3 data.frame...
df_interest <- raw_json$athletes$athlete[c("displayName", "teamName", "teamShortName")]
length_df <- nrow(df_interest)
pbp_out <- data.frame()
# "TQBR" "PA"   "QBP"  "TOT"  "PAS"  "RUN"  "EXP"  "PEN"  "QBR"  "SAC"
category_names <- raw_json[["categories"]][["labels"]][[1]]
# here are the totals for the first player
aa <- raw_json$athletes$categories[[1]]$totals[[1]] %>% as.double()
split(aa, category_names)
split(aa, category_names)
split(aa, category_names) %>% cbind.data.frame()
for (i in 1:length_df){
# grab each QBs stats and convert to a vector of type double
raw_vec <- as.double(raw_json$athletes$categories[[i]]$totals[[1]])
# split each stat into it's own list with the proper name
split_vec <- split(raw_vec, category_names)
# convert the list into a dataframe
pbp_df_loop <- cbind.data.frame(split_vec)
# combine the 30 QB's stats into the empty data.frame
pbp_out <- rbind(pbp_out, pbp_df_loop)
}
pbp_out
# combine our loop-created df w/ the QB names/team
final_loop_df <- cbind(df_interest, pbp_out)
library(dplyr)
# take a peek at the result!
head(final_loop_df)
glimpse(final_loop_df)
df_interest <- raw_json$athletes$athlete[c("displayName", "teamName", "teamShortName")]
df_interest <- raw_json$athletes$athlete[c("displayName", "teamName", "teamShortName")]
# how many rows?
length_df <- nrow(df_interest)
# category names again
category_names <- raw_json[["categories"]][["labels"]][[1]]
# extract the core name dataframe
# list of athletes.
df_interest <- raw_json$athletes$athlete[c("displayName", "teamName", "teamShortName")]
# how many rows?
length_df <- nrow(df_interest)
length_df
# category names again
category_names <- raw_json[["categories"]][["labels"]][[1]]
category_names
category_names <- raw_json[["categories"]][["labels"]][[1]]
df_interest
raw_json$athletes$categories
raw_json$athletes$categories[[1]]
raw_json$athletes$categories[[1]]$totals[[1]]
category_names
category_names %>% length()
raw_vec <- raw_json$athletes$categories[[1]]$totals[[1]] %>% as.double()
raw_vec
split(raw_vec, category_names)
# create a function to apply
qbr_stat_fun <- function(qb_num){
# grab each QBs stats and convert to a vector of type double length [10]
raw_vec <- as.double(raw_json$athletes$categories[[qb_num]]$totals[[1]])
# split each stat into it's own list with the proper name
# this is a named list. Could be a named vector.
split_vec <- split(raw_vec, category_names)
# return the lists
split_vec
}
# use apply to generate list of lists
list_qbr_stats <- lapply(1:length_df, qbr_stat_fun)
# Combine the lists into a dataframe
list_pbp_df <- do.call("rbind.data.frame", list_qbr_stats)
# cbind the names with the stats
cbind(df_interest, list_pbp_df) %>% glimpse()
raw_json %>%
# equivalent to raw_json[["athletes"]][["athlete"]]
purrr::pluck("athletes", "athlete") %>%
glimpse()
raw_json %>%
# equivalent to raw_json[["athletes"]][["athlete"]]
purrr::pluck("athletes", "athlete") %>% class()
raw_json %>% purrr::pluck("athletes", "athlete") %>% class()
raw_json %>% purrr::pluck("athletes", "athlete") %>% dim()
raw_json$athletes
raw_json$athletes %>% dim()
raw_json$athletes %>% str()
listviewer::jsonedit(raw_json)
raw_json %>%
# equivalent to raw_json[["athletes"]][["athlete"]][["headshot"]]
purrr::pluck("athletes", "athlete", "headshot") %>%
glimpse()
raw_json %>% purrr::pluck("athletes", "athlete", "headshot") %>% glimpse()
raw_json %>% purrr::pluck("athletes", "athlete", "headshot") %>% dim()
raw_json %>% View()
raw_json$athletes %>% View()
xx <- raw_json$athletes
type(xx)
class(xx)
xx
xx %>% dim()
xx %>% names()
xx %>% View()
# xx is 30 rows
xx <- raw_json$athletes
listviewer::jsonedit(xx)
# get names of the QBR categories with pluck
category_names <- pluck(raw_json, "categories", "labels", 1)
category_names
get_qbr_data <- function(row_n) {
purrr::pluck(raw_json, "athletes", "categories", row_n, "totals", 1) %>%
# convert from character to double
as.double() %>%
# assign names from category
set_names(nm = category_names)
}
get_qbr_data(1)
get_qbr_data(1)
get_qbr_data(1) %>% class()
# create the dataframe and tidy it up
pbp_df <- pluck(raw_json, "athletes", "athlete") %>%
# convert to tibble
as_tibble() %>%
# select columns of interest
select(displayName, teamName:teamShortName, headshot)
# print it
pbp_df
# Take our pbp_df
wide_pbp_df <- pbp_df %>%
# and then map across it to get the QBR data
mutate(data = map(row_number(), get_qbr_data)) %>%
# and then unnest the list column we created
unnest_wider(data)
wide_pbp_df %>%
glimpse()
# Take our pbp_df
wide_pbp_df <- pbp_df %>%
# and then map across it to get the QBR data
mutate(data = map(row_number(), get_qbr_data)) %>%
# and then unnest the list column we created
unnest_wider(data)
wide_pbp_df %>%
glimpse()
# create the dataframe and tidy it up
pbp_df <- pluck(raw_json, "athletes", "athlete") %>%
# convert to tibble
as_tibble() %>%
# select columns of interest
select(displayName, teamName:teamShortName, headshot)
# print it
pbp_df
# Take our pbp_df
wide_pbp_df <- pbp_df %>%
# and then map across it to get the QBR data
mutate(data = map(row_number(), get_qbr_data)) %>%
# and then unnest the list column we created
unnest_wider(data)
wide_pbp_df %>%
glimpse()
wide_pbp_df
wide_pbp_df %>% names()
wide_pbp_df %>% glimpse()
wide_pbp_df %>% str()
wide_pbp_df %>% str()
wide_pbp_df %>% str()
final_pluck <- wide_pbp_df %>%
# we can pluck just the `href` column
mutate(headshot = pluck(headshot, "href"))
final_pluck
final_pluck %>% glimpse()
wide_pbp_df %>%
unpack(headshot)
final_unpack <- wide_pbp_df %>%
unpack(headshot) %>%
# unpack includes the alt column as well
select(everything(), headshot = href, -alt)
final_unpack %>% glimpse()
final_base <- wide_pbp_df %>%
# we can use traditional base R column selection
mutate(headshot = headshot[["href"]])
wide_pbp_df$headshot
final_join <- wide_pbp_df %>%
# could also do a join
left_join(wide_pbp_df$headshot, by = c("displayName" = "alt")) %>%
# but have to drop and do additional cleanup
select(-headshot, displayName:teamShortName, headshot = href, TQBR:SAC)
# all are the same!
c(all.equal(final_pluck, final_unpack),
all.equal(final_pluck, final_base),
all.equal(final_pluck, final_join))
all.equal(final_pluck, final_unpack)
all.equal(final_pluck, final_base)
all.equal(final_pluck, final_join)
library(tidyverse)
library(jsonlite)
# link to the API output as a JSON file
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
# get the raw json into R
raw_json_list <- jsonlite::read_json(url_json)
# get names of the QBR categories
category_names <- pluck(raw_json_list, "categories", 1, "labels")
# create tibble out of athlete objects
athletes <- tibble(athlete = pluck(raw_json_list, "athletes"))
qbr_hadley <- athletes %>%
unnest_wider(athlete) %>%
hoist(athlete, "displayName", "teamName", "teamShortName") %>%
unnest_longer(categories) %>%
hoist(categories, "totals") %>%
mutate(totals = map(totals, as.double),
totals = map(totals, set_names, category_names)) %>%
unnest_wider(totals) %>%
hoist(athlete, headshot = list("headshot", "href")) %>%
select(-athlete, -categories)
# Is it the same as my version?
all.equal(final_pluck, qbr_hadley)
library(tidyverse)
library(jsonlite)
# link to the API output as a JSON file
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
# get the raw json into R
raw_json <- jsonlite::fromJSON(url_json)
# get names of the QBR categories
category_names <- pluck(raw_json, "categories", "labels", 1)
# Get the QBR stats by each player (row_n = player)
get_qbr_data <- function(row_n) {
purrr::pluck(raw_json, "athletes", "categories", row_n, "totals", 1) %>%
as.double() %>%
set_names(nm = category_names)
}
# create the dataframe and tidy it up
ex_output <- pluck(raw_json, "athletes", "athlete") %>%
as_tibble() %>%
select(displayName, teamName:teamShortName, headshot) %>%
mutate(data = map(row_number(), get_qbr_data)) %>%
unnest_wider(data) %>%
mutate(headshot = pluck(headshot, "href"))
glimpse(ex_output)
library(tidyr)
library(dplyr)
library(repurrrsive)
install.packages("repurrrsive")
users <- tibble(user = gh_users)
library(tidyr)
library(dplyr)
library(repurrrsive)
users <- tibble(user = gh_users)
users
users[, 1]
users %>% dim()
users %>% names()
users$user[[1]]
users$user[[1]] %>% names()
users$user[[1]] %>% names() %>% length()
users %>% unnest_wider(user)
users %>% hoist(user, followers = "followers", login = "login", url = "html_url")
repos <- tibble(repo = gh_repos)
repos
repos$repo
repos$repo %>% length()
repos$repo %>% names()
repos$repo[[1]]
repos$repo %>% length()
repos$repo[[1]]
repos$repo[[1]] %>% class()
repos$repo[[1]] %>% length()
repos$repo[[1]] %>% names()
ccc <- repos$repo[[1]]
View(ccc)
listviewer::jsonedit(repos)
repos <- repos %>% unnest_longer(repo)
repos
repos %>% dim()
repos <- tibble(repo = gh_repos)
# have a single column called "repo" and this is an array.  There are 6 elements.
# each of these elements have 30 observations.
listviewer::jsonedit(repos)
# this becomes 176 rows.
new_repos <- repos %>% unnest_longer(repo)
bbb <- repos$repo
bbb %>% length()
bbb[[1]]
bbb[[1]] %>% class()
bbb[[1]] %>% length()
bbb[[2]] %>% length()
bbb[[3]] %>% length()
bbb[[4]] %>% length()
bbb[[5]] %>% length()
bbb[[6]] %>% length()
bbb[[7]] %>% length()
(5 * 30) + 26
repos <- tibble(repo = gh_repos)
repos %>% dim()
repos %>% names()
new_repos <- repos %>% unnest_longer(repo)
new_repos %>% dim()
new_repos %>% head()
new_repos$repo %>% length()
new_repos$repo[[1]] %>% length()
new_repos %>% View()
?apply
apply(new_repos, 1, length)
apply(new_repos$repo, 1, length)
new_repos$repo[[1]] %>% length()
new_repos$repo[[2]] %>% length()
new_repos$repo[[2]]
new_repos$repo %>% length()
seq_len(new_repos$repo)
1:length(new_repos$repo)
new_repos$repo[[2]] %>% length()
vct_length <- 1:length(new_repos$repo) %>%
sapply(function(x) new_repos$repo[[x]] %>% length())
vct_length
new_repos$repo[[1]]
new_repos$repo[[1]] %>% names()
new_repos$repo %>% length()
new_repos$repo[[1]] %>% names() %>% sort()
xxx <- new_repos$repo[[1]]
xxx$owner %>% class()
xxx$name %>% class()
xxx$homepage %>% class()
xxx$watchers_count %>% class()
xxx$owner %>% class()
test <- xxx$owner
test$login %>% class()
new_repos %>%
hoist(repo,
# owner is a list and login is a character
login = c("owner", "login"),
# name is character vector
name = "name",
# homepage is null
homepage = "homepage",
# watchers_count is integer
watchers = "watchers_count"
)
new_repos$repo[[1]]$owner
new_repos$repo[[1]]$owner %>% names()
new_repos$repo[[1]]$owner %>% names()
new_repos$repo[[1]]$owner %>% names() %>% length()
chars <- tibble(char = got_chars)
chars
chars2 <- chars %>% unnest_wider(char)
chars2 %>% dim()
chars2 <- chars %>% unnest_wider(char)
chars2 %>% View()
chars2 <- chars %>% unnest_wider(char)
chars2
chars2 %>% select_if(is.list)
chars2 %>%
select(name, books, tvSeries) %>%
pivot_longer(c(books, tvSeries), names_to = "media", values_to = "value") %>%
unnest_longer(value)
chars2 %>%
select(name, books, tvSeries)
chars2$books
chars2$books[[1]]
chars2$books[[2]]
chars2$books[[3]]
chars2$tvSeries[[3]]
chars2$tvSeries[[2]]
chars2$tvSeries[[1]]
chars2$tvSeries[[6]]
chars2$tvSeries[[3]]
chars2$tvSeries[[9]]
chars2$tvSeries[[8]]
chars2$tvSeries[[18]]
chars2 %>%
select(name, books, tvSeries)
chars2 %>%
select(name, books, tvSeries) %>%
pivot_longer(c(books, tvSeries), names_to = "media", values_to = "value")
chars2 %>%
select(name, books, tvSeries) %>%
# this will result in "name", "media", "value" (i.e. list)  about 60 rows.
# is uniquen by "name" and "media"
pivot_longer(c(books, tvSeries), names_to = "media", values_to = "value") %>%
# this will repeat "name" and "media" and then peel out "value"
unnest_longer(value)
library(tidyr)
library(dplyr)
library(repurrrsive)
discs <- tibble(disc = discog) %>%
unnest_wider(disc) %>%
mutate(date_added = as.POSIXct(strptime(date_added, "%Y-%m-%dT%H:%M:%S")))
discs
discs <- tibble(disc = discog) %>%
unnest_wider(disc) %>%
mutate(date_added = as.POSIXct(strptime(date_added, "%Y-%m-%dT%H:%M:%S")))
discs
discs %>% unnest_wider(basic_information)
discs %>% unnest_wider(basic_information, names_repair = "unique")
discs
discs %>% dim()
discs %>% unnest_wider(basic_information, names_repair = "unique")
discs %>%
select(!id) %>%
unnest_wider(basic_information)
discs %>%
hoist(basic_information,
title = "title",
year = "year",
label = list("labels", 1, "name"),
artist = list("artists", 1, "name")
)
discs$basic_information
discs$basic_information[[1]]
discs$basic_information[[1]] %>% View()
discs$basic_information[[1]]$artists
discs %>%
hoist(basic_information,
title = "title",
year = "year",
label = list("labels", 1, "name"),
artist = list("artists", 1, "name")
)
discs %>%
hoist(basic_information, artist = "artists") %>%
select(disc_id = id, artist) %>%
unnest_longer(artist) %>%
unnest_wider(artist)
discs %>%
hoist(basic_information, format = "formats") %>%
select(disc_id = id, format) %>%
unnest_longer(format) %>%
unnest_wider(format) %>%
unnest_longer(descriptions)
# link to the API output as a JSON file
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
# get the raw json into R
raw_json_list <- jsonlite::read_json(url_json)
# get names of the QBR categories
category_names <- pluck(raw_json_list, "categories", 1, "labels")
# create tibble out of athlete objects
athletes <- tibble(athlete = pluck(raw_json_list, "athletes"))
qbr_hadley <- athletes %>%
unnest_wider(athlete) %>%
hoist(athlete, "displayName", "teamName", "teamShortName") %>%
unnest_longer(categories) %>%
hoist(categories, "totals") %>%
mutate(totals = map(totals, as.double),
totals = map(totals, set_names, category_names)) %>%
unnest_wider(totals) %>%
hoist(athlete, headshot = list("headshot", "href")) %>%
select(-athlete, -categories)
qbr_hadley
library(tidyverse)
library(jsonlite)
# link to the API output as a JSON file
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
# get the raw json into R
raw_json <- jsonlite::fromJSON(url_json)
# get names of the QBR categories
category_names <- pluck(raw_json, "categories", "labels", 1)
# Get the QBR stats by each player (row_n = player)
get_qbr_data <- function(row_n) {
purrr::pluck(raw_json, "athletes", "categories", row_n, "totals", 1) %>%
as.double() %>%
set_names(nm = category_names)
}
# create the dataframe and tidy it up
ex_output <- pluck(raw_json, "athletes", "athlete") %>%
as_tibble() %>%
select(displayName, teamName:teamShortName, headshot) %>%
mutate(data = map(row_number(), get_qbr_data)) %>%
unnest_wider(data) %>%
mutate(headshot = pluck(headshot, "href"))
glimpse(ex_output)
rm(list = ls())
library(tidyverse)
library(jsonlite)
library(listviewer)
# https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite/
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
raw_json <- jsonlite::fromJSON(url_json)
str(raw_json, max.level = 1)
listviewer::jsonedit(raw_json)
rm(list = ls())
library(tidyverse)
library(jsonlite)
library(listviewer)
# https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite/
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
raw_json <- jsonlite::fromJSON(url_json)
rm(list = ls())
library(tidyverse)
library(jsonlite)
library(listviewer)
# https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite/
url_json <- "https://site.web.api.espn.com/apis/fitt/v3/sports/football/nfl/qbr?region=us&lang=en&qbrType=seasons&seasontype=2&isqualified=true&sort=schedAdjQBR%3Adesc&season=2019"
raw_json <- jsonlite::fromJSON(url_json)
